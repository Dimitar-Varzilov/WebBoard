// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebBoard.Data;

#nullable disable

namespace WebBoard.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebBoard.Common.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Jobs_CreatedAt");

                    b.HasIndex("JobType")
                        .HasDatabaseName("IX_Jobs_JobType");

                    b.HasIndex("ScheduledAt")
                        .HasDatabaseName("IX_Jobs_ScheduledAt")
                        .HasFilter("\"ScheduledAt\" IS NOT NULL");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Jobs_Status");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("WebBoard.Common.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("WebBoard.Common.Models.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Tasks_CreatedAt");

                    b.HasIndex("JobId")
                        .HasDatabaseName("IX_Tasks_JobId")
                        .HasFilter("\"JobId\" IS NOT NULL");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Tasks_Status");

                    b.HasIndex("Status", "JobId")
                        .HasDatabaseName("IX_Tasks_Status_JobId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("WebBoard.Common.Models.Report", b =>
                {
                    b.HasOne("WebBoard.Common.Models.Job", "Job")
                        .WithOne("Report")
                        .HasForeignKey("WebBoard.Common.Models.Report", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WebBoard.Common.Models.TaskItem", b =>
                {
                    b.HasOne("WebBoard.Common.Models.Job", "Job")
                        .WithMany("Tasks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WebBoard.Common.Models.Job", b =>
                {
                    b.Navigation("Report");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
