using Microsoft.EntityFrameworkCore;
using System.Text;
using WebBoard.API.Common.Constants;
using WebBoard.API.Data;
using WebBoard.API.Services.Reports;

namespace WebBoard.API.Services.Jobs
{
	[JobType(Constants.JobTypes.GenerateTaskReport)]
	public class GenerateTaskListJob(IServiceProvider serviceProvider, ILogger<GenerateTaskListJob> logger)
		: BaseJob(serviceProvider, logger)
	{
		protected override async Task<JobExecutionResult> ExecuteJobLogic(
			IServiceProvider scopedServices,
			AppDbContext dbContext,
			Guid jobId,
			CancellationToken cancellationToken)
		{
			Logger.LogInformation("Starting task list generation for job {JobId}", jobId);

			try
			{
				// Get services from the scoped provider (no nested scope needed)
				var reportService = scopedServices.GetRequiredService<IReportService>();
				var statusNotifier = scopedServices.GetRequiredService<IJobStatusNotifier>();

				// Generate task list report content for tasks assigned to this job only
				var reportContent = await GenerateJobTaskListReportAsync(dbContext, jobId, cancellationToken);
				var fileName = $"TaskList_Job_{jobId}_{DateTime.UtcNow:yyyyMMddHHmmss}.txt";
				var contentType = "text/plain";

				// Create report entity linked to this job
				var report = await reportService.CreateReportAsync(jobId, fileName, reportContent, contentType);

				// Notify clients about report generation
				await statusNotifier.NotifyReportGeneratedAsync(jobId, report.Id, fileName);

				Logger.LogInformation("Task list generation completed for job {JobId} with report {ReportId}", jobId, report.Id);

				// Get task count from the report generation
				var taskCount = await dbContext.Tasks
					.Where(t => t.JobId == jobId)
					.CountAsync(cancellationToken);

				// Return success with the number of tasks processed
				return new JobExecutionResult(
					IsSuccess: true,
					TasksProcessed: taskCount);
			}
			catch (Exception ex)
			{
				Logger.LogError(ex, "Error generating task list for job {JobId}", jobId);
				
				// Return failure with error message
				return new JobExecutionResult(
					IsSuccess: false,
					TasksProcessed: 0,
					ErrorMessage: ex.Message);
			}
		}

		/// <summary>
		/// Generates a task list report for tasks assigned to the specified job
		/// </summary>
		/// <param name="dbContext">Database context</param>
		/// <param name="jobId">The job ID to generate report for</param>
		/// <param name="ct">Cancellation token</param>
		/// <returns>Report content as string</returns>
		private async Task<string> GenerateJobTaskListReportAsync(AppDbContext dbContext, Guid jobId, CancellationToken ct)
		{
			// Get only tasks assigned to this specific job
			var tasks = await dbContext.Tasks
				.AsNoTracking()
				.Where(t => t.JobId == jobId)
				.OrderBy(t => t.CreatedAt)
				.ToListAsync(ct);

			var report = new StringBuilder();
			report.AppendLine("TASK LIST REPORT");
			report.AppendLine($"Job ID: {jobId}");
			report.AppendLine($"Generated on: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
			report.AppendLine($"Total Tasks: {tasks.Count}");
			report.AppendLine(new string('=', 50));
			report.AppendLine();

			if (tasks.Count == 0)
			{
				Logger.LogWarning("No tasks found for job {JobId}", jobId);
				report.AppendLine("No tasks assigned to this job.");
			}
			else
			{
				Logger.LogInformation("Generating report for {TaskCount} tasks in job {JobId}", tasks.Count, jobId);

				// Group tasks by status
				var tasksByStatus = tasks.GroupBy(t => t.Status);

				foreach (var group in tasksByStatus)
				{
					report.AppendLine($"{group.Key.ToString().ToUpper()} TASKS ({group.Count()}):");
					report.AppendLine(new string('-', 30));

					foreach (var task in group)
					{
						report.AppendLine($"• {task.Title}");
						report.AppendLine($"  Description: {task.Description}");
						report.AppendLine($"  Created: {task.CreatedAt:yyyy-MM-dd HH:mm:ss}");
						report.AppendLine();
					}
				}
			}

			report.AppendLine(new string('=', 50));
			report.AppendLine($"Report generated by WebBoard Task Management System");

			return report.ToString();
		}
	}
}