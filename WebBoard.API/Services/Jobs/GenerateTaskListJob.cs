using Microsoft.EntityFrameworkCore;
using System.Text;
using WebBoard.API.Common.Constants;
using WebBoard.API.Data;
using WebBoard.API.Services.Reports;

namespace WebBoard.API.Services.Jobs
{
	[JobType(Constants.JobTypes.GenerateTaskReport)]
	public class GenerateTaskListJob(IServiceProvider serviceProvider, ILogger<GenerateTaskListJob> logger)
		: BaseJob(serviceProvider, logger)
	{
		protected override async Task ExecuteJobLogic(AppDbContext dbContext, Guid jobId, CancellationToken cancellationToken)
		{
			Logger.LogInformation("Starting task list generation for job {JobId}", jobId);

			using var scope = ServiceProvider.CreateScope();
			var reportService = scope.ServiceProvider.GetRequiredService<IReportService>();

			// Generate task list report content
			var reportContent = await GenerateTaskListReportAsync(dbContext, cancellationToken);
			var fileName = $"TaskList_{DateTime.UtcNow:yyyyMMddHHmmss}.txt";
			var contentType = "text/plain";

			// Create report entity linked to this job
			await reportService.CreateReportAsync(jobId, fileName, reportContent, contentType);

			Logger.LogInformation("Task list generation completed for job {JobId}", jobId);
		}

		private static async Task<string> GenerateTaskListReportAsync(AppDbContext dbContext, CancellationToken ct)
		{
			var tasks = await dbContext.Tasks
				.AsNoTracking()
				.OrderBy(t => t.CreatedAt)
				.ToListAsync(ct);

			var report = new StringBuilder();
			report.AppendLine("TASK LIST REPORT");
			report.AppendLine($"Generated on: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
			report.AppendLine($"Total Tasks: {tasks.Count}");
			report.AppendLine(new string('=', 50));
			report.AppendLine();

			if (tasks.Count == 0)
			{
				report.AppendLine("No tasks found.");
			}
			else
			{
				// Group tasks by status
				var tasksByStatus = tasks.GroupBy(t => t.Status);

				foreach (var group in tasksByStatus)
				{
					report.AppendLine($"{group.Key.ToString().ToUpper()} TASKS ({group.Count()}):");
					report.AppendLine(new string('-', 30));

					foreach (var task in group)
					{
						report.AppendLine($"• {task.Title}");
						report.AppendLine($"  Description: {task.Description}");
						report.AppendLine($"  Created: {task.CreatedAt:yyyy-MM-dd HH:mm:ss}");
						report.AppendLine();
					}
				}
			}

			report.AppendLine(new string('=', 50));
			report.AppendLine($"Report generated by WebBoard Task Management System");

			return report.ToString();
		}
	}
}